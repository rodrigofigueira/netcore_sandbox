name: Deploy API to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'APIDockerECS/src/**'
      - 'APIDockerECS/infra/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: apidockerecs-repo
  ECS_CLUSTER: api-test-cluster
  ECS_SERVICE: api-test-service

permissions:
  id-token: write
  contents: read

jobs:
  # Job de deploy que roda em commits normais
  deploy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[destroy]')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: github-actions-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Passo 1: Rodar o Terraform para garantir que a infraestrutura exista
      - name: Terraform Init and Apply
        id: apply
        run: |
          terraform init
          terraform apply -input=false -auto-approve -var "image_tag=${{ github.sha }}"
        working-directory: ./APIDockerECS/infra

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and Tag Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./APIDockerECS/src

      # Passo 2: Fazer o Push da imagem agora que o repositório existe
      - name: Push Docker image to ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
  # O Job de destroy pode ficar como está
  destroy:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[destroy]')"
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: github-actions-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./APIDockerECS/infra

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./APIDockerECS/infra